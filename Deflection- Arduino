/*------------------------------------------------Emergency------------------------------------------------*/
bool f=false;
bool touch=LOW;
int t_now;
int buzzer;
/*------------------------------------------------Ultrasonic------------------------------------------------*/
const int frontEchoPin = 6;
const int frontTriggerPin = 8;
const int leftEchoPin = 11;
const int leftTriggerPin = 12;
const int rightEchoPin = 9;
const int rightTriggerPin = 10;
/*-----------------------------------------------Motor-----------------------------------------------------*/
const int IPmotorL1 = 2;
const int IPmotorL2 = 3;
const int IPmotorR1 = 4;
const int IPmotorR2 = 5;
/*-------------------------------------------------obstrucle thresholds------------------------------------*/
volatile float maxFrontDistance = 15.00;
volatile float frontDuration, frontDistanceCm, leftDuration, leftDistanceCm, rightDuration, rightDistanceCm;
volatile float maxLeftDistance=15.00, maxRightDistance = 15.00;

void setup() {
  // serial
  Serial.begin(9600);
  setupMotor();
}
void loop() {
  /*-------------------------------------------------------Obstrucle avoidance---------------------------------------------------------*/
  if(checkFrontDistance)
    obstrucle();  
  smoke();
  /*-------------------------------------------------------Emergency--------------------------------------------------------------------*/                                          
  if(touch)
    { t_now=millis();f=false;Serial.println("OK");}
    while(millis()-t_now<30000 && !touch )
     { if(touch){f=false; break;}
      f=true;}
    if(f)
      Emergency();
  
}
void setupMotor(){
  pinMode(frontTriggerPin, OUTPUT);
  pinMode(frontEchoPin, INPUT);
  pinMode(leftTriggerPin, OUTPUT);
  pinMode(leftEchoPin, INPUT);
  pinMode(rightTriggerPin, OUTPUT);
  pinMode(rightEchoPin, INPUT);
  pinMode(IPmotorL1, OUTPUT);
  pinMode(IPmotorL2, OUTPUT);
  pinMode(IPmotorR1, OUTPUT);
  pinMode(IPmotorR2, OUTPUT);
}
void obstrucle(){
  if(checkRightDistance)
      {
        while(checkFrontDistance && !checkLeftDistance)
        Left();
        
        _stop_();
        delay(100);
        while(checkRightDistance)
        Forward();
        
         _stop_();
        delay(100);
        Right();
        while(checkRightDistance)
        Forward();

        _stop_();
        delay(100);
      }
   else if(checkLeftDistance && !checkRightDistance)
   {
    while(checkFrontDistance)
        Right();
        
        _stop_();
        delay(100);
        while(checkLeftDistance)
        Forward();
        
         _stop_();
        delay(100);
        Left();
        while(checkLeftDistance)
        Forward();

        _stop_();
        delay(100);
   }
   else if(!checkRightDistance && !checkLeftDistance)
   {
    while(checkFrontDistance)
        Left(); 
        
        _stop_();
        delay(100);
        while(checkRightDistance)
        Forward();
        
         _stop_();
        delay(100);
        Right(); 
        while(checkRightDistance)
        Forward();

        _stop_();
        delay(100);
   }
   else
   {
     while(checkFrontDistance)
        Right();
   _stop_();
   delay(100);
   
   while(checkRightDistance || checkLeftDistance){
    if(!checkRightDistance)
    Right();
    delay(10);
    Forward();
    delay(10);
    Right();
    delay(10);

    if(!checkLeftDistance)
    Left();
    delay(10);
    Forward();
    delay(10);
    Left();
    delay(10);
   }
   
   }
}
void pulseFront(){
  digitalWrite(frontTriggerPin, LOW);  
  delayMicroseconds(4);
  digitalWrite(frontTriggerPin, HIGH);  
  delayMicroseconds(10);
  digitalWrite(frontTriggerPin, LOW);
  frontDuration = pulseIn(frontEchoPin, HIGH);  
  frontDistanceCm = frontDuration * 10 / 292 / 2;  
  Serial.print("Distance: ");
  Serial.print(frontDistanceCm);
  Serial.println(" cm");
  delay(100);
}
   
bool checkFrontDistance() {
  pulseFront();
  if(frontDistanceCm<maxFrontDistance)
  return true;
  else
  return false;
}
void pulseLeft(){
   digitalWrite(leftTriggerPin, LOW);  
  delayMicroseconds(4);
  digitalWrite(leftTriggerPin, HIGH);  
  delayMicroseconds(10);
  digitalWrite(leftTriggerPin, LOW);
  leftDuration = pulseIn(leftEchoPin, HIGH);  
  leftDistanceCm = leftDuration * 10 / 292 / 2;  
  Serial.print("Left distance: ");
  Serial.print(leftDistanceCm);
  Serial.println(" cm");
   delay(100);
}
bool checkLeftDistance() {
  pulseLeft();
  if(leftDistanceCm<maxLeftDistance)
  return true;
  else
  return false;
}
void pulseRight(){
  digitalWrite(rightTriggerPin, LOW);  
  delayMicroseconds(4);
  digitalWrite(rightTriggerPin, HIGH); 
  delayMicroseconds(10);
  digitalWrite(rightTriggerPin, LOW);
  rightDuration = pulseIn(rightEchoPin, HIGH);  
  rightDistanceCm = rightDuration * 10 / 292 / 2;  
  Serial.print("Right distance: ");
  Serial.print(rightDistanceCm);
  Serial.println(" cm");
  delay(100);
}
bool checkRightDistance() {
  pulseRight();
  if(rightDistanceCm<maxRightDistance)
  return true;
  else
  return false;
}
void Backward() {
  Serial.println("Backward.");
  digitalWrite(IPmotorL1, HIGH);
  digitalWrite(IPmotorL2, LOW);
  digitalWrite(IPmotorR1, HIGH);
  digitalWrite(IPmotorR2, LOW);
}
void Forward() {
  Serial.println("Forward.");
  digitalWrite(IPmotorL1, LOW);
  digitalWrite(IPmotorL2, HIGH);
  digitalWrite(IPmotorR1, LOW);
  digitalWrite(IPmotorR2, HIGH);
}
void Left() {
  Serial.println("Left.");
  digitalWrite(IPmotorL1, LOW);
  digitalWrite(IPmotorL2, HIGH);
  digitalWrite(IPmotorR1, HIGH);
  digitalWrite(IPmotorR2, LOW);
}
void Right() {
  Serial.println("Right.");
  digitalWrite(IPmotorL1, HIGH);
  digitalWrite(IPmotorL2, LOW);
  digitalWrite(IPmotorR1, LOW);
  digitalWrite(IPmotorR2, HIGH);
}
void _stop_(){
  Serial.println("Stop");
  digitalWrite(IPmotorL1, LOW);
  digitalWrite(IPmotorL2, LOW);
  digitalWrite(IPmotorR1, LOW);
  digitalWrite(IPmotorR2, LOW);
}
void Emergency()
{
  tone(buzzer,1000);
  Serial.println("Emergency");
}
void smoke()
{
  int thresh;
  int smoke_value=analogRead(A5);
  Serial.println(smoke_value);
  if(smoke_value>=thresh)
    Emergency();
  else
   noTone(buzzer);
}
